#                                _                       _
#            _____   _ _ __   __| | ___ _ __     _______| |__
#           |_  / | | | '_ \ / _` |/ _ \ '__|___|_  / __| '_ \
#            / /| |_| | | | | (_| |  __/ | |_____/ /\__ \ | | |
#           /___|\__,_|_| |_|\__,_|\___|_|      /___|___/_| |_|
#
## INITIALIZATION =============================================================
# Directory where before.zsh and after.zsh are located.
ZUNDER_ZSH_DIR="$HOME/.config/zunder-zsh"

# By default zcompdump is created in the home directory, so we will create a
# directory for the zsh cache in a separate directory to clean things up a
# little bit.
CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/zsh"

# Creates the cache directory if doesn't exist, as compinit will fail if it
# doesn't find the directory in which .zcompdump is specified to be located.
[[ ! -d "$CACHE_DIR" ]] && mkdir -p "$CACHE_DIR"

# Disable syntax highlightling in WSL.
[[ -f /proc/sys/fs/binfmt_misc/WSLInterop ]] && DISABLE_SYNTAX_HIGHLIGHTING=true

# Disable autosuggestions and exa in Linux tty.
if [[ "$TERM" == "linux" ]]; then
  DISABLE_AUTOSUGGESTIONS=true
  DISABLE_EXA=true
fi

## ZINIT ======================================================================
# Changes the zcompdump directory. The .zcompdump file is used to improve
# compinit's initialization time.
declare -A ZINIT
ZINIT[ZCOMPDUMP_PATH]="$CACHE_DIR/.zcompdump"

# Zinit initialization
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[[ ! -d "$ZINIT_HOME" ]] && mkdir -p "$(dirname "$ZINIT_HOME")"
[[ ! -d "$ZINIT_HOME"/.git ]] \
  && git clone https://github.com/zdharma-continuum/zinit.git --depth=1 \
    "$ZINIT_HOME"

# Compiles zinit.zsh if it's newer than its compiled version. Then sources it.
[[ "$ZINIT_HOME/zinit.zsh.zwc" -nt "$ZINIT_HOME/zinit.zsh" ]] \
  || zcompile -R "$ZINIT_HOME/zinit.zsh"
source "$ZINIT_HOME/zinit.zsh"

## COMPLETIONS ================================================================
# Initializes completion system. Relevant documentation:
# https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Use-of-compinit.
zicompinit

# Compiles the .zcompdump to load it faster next time.
# Search for zcompile in https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html.
[[ "$ZINIT[ZCOMPDUMP_PATH].zwc" -nt "$ZINIT[ZCOMPDUMP_PATH]" ]] \
  || zcompile "$ZINIT[ZCOMPDUMP_PATH]"

# Matches completion menu colors with the LS_COLORS variable.
[[ -n $LS_COLORS ]] && zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# Marks the selected item in the completion menu.
zstyle ':completion:*:*:*:*:*' menu select

# Makes the completion case-insensitive unless a uppercase is used and fuzzy.
zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]-_}={[:upper:][:lower:]_-}' 'r:|=*' 'l:|=* r:|=*'

# Enables cache. I have not found any real use for it but theoretically it is
# useful to improve the speed of some completions.
zstyle ':completion:*' use-cache true
zstyle ':completion:*' cache-path "$CACHE_DIR/.zcompcache"

# Attempts to find new commands to complete.
zstyle ':completion:*' rehash true

# Specifies which characters are considered part of a word for completion
# purposes. In this case, underscores (_) and hyphens (-) will be treated as
# part of words, preventing the shell from splitting at these characters during
# word completion.
WORDCHARS='_-'
## BEFORE CONFIG ==============================================================
[[ -f "$ZUNDER_ZSH_DIR/before.zsh" ]] && source "$ZUNDER_ZSH_DIR/before.zsh" || true

## ZSH PLUGINS =================================================================
# Zunder-prompt
zinit light-mode depth"1" if'[[ $DISABLE_ZUNDER_PROMPT != true ]]' for \
  romkatv/gitstatus \
  warbacon/zunder-prompt

# Oh My Zsh plugins
zinit light-mode for \
    OMZP::command-not-found

# Additional completions
zinit light-mode blockf depth"1" for \
    zsh-users/zsh-completions

# Fast-syntax-highlighting and zsh-autosuggestions
zinit wait lucid light-mode depth"1" for \
  if'[[ $DISABLE_SYNTAX_HIGHLIGHTING != true ]]' \
    zdharma-continuum/fast-syntax-highlighting \
  if'[[ $DISABLE_AUTOSUGGESTIONS != true ]]' \
  atinit"ZSH_AUTOSUGGEST_MANUAL_REBIND=1" atload"_zsh_autosuggest_start" nocd \
    zsh-users/zsh-autosuggestions

## KEYBINDINGS ================================================================
# Forces the use of emacs keyboard shortcuts. By default uses the vim ones,
# but they are not very good by default and can be confusing for novice users.
bindkey -e

# These additional shortcuts only apply to emacs mode, since they have the
# `-M emacs` flag.

# [Ctrl-LeftArrow] - move backward one word
bindkey -M emacs "^[[1;5D" backward-word
# [Ctrl-RightArrow] - move forward one word
bindkey -M emacs "^[[1;5C" forward-word

# [Alt-LeftArrow] - move backward one word
bindkey -M emacs "^[[1;3D" backward-word
# [Alt-RightArrow] - move forward one word
bindkey -M emacs "^[[1;3C" forward-word

# [Shift-Tab] - move through the completion menu backwards
bindkey -M emacs "^[[Z" reverse-menu-complete

# [Delete] - delete forward
bindkey -M emacs "^[[3~" delete-char
# [Ctrl-Delete] - delete whole forward-word
bindkey -M emacs '^[[3;5~' kill-word

# Start typing + [Up-Arrow] - fuzzy find history forward
autoload -U up-line-or-beginning-search
zle -N up-line-or-beginning-search
bindkey -M emacs "^[[A" up-line-or-beginning-search

# Start typing + [Down-Arrow] - fuzzy find history backward
autoload -U down-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey -M emacs "^[[B" down-line-or-beginning-search

## HISTORY ====================================================================
HISTFILE="$HOME/.zsh_history" # Location of the history file.
HISTSIZE=50000                # Maximum number of commands in the history.
SAVEHIST=10000                # Number of commands to save between sessions.
setopt share_history          # Share history between sessions.

## ALIASES ====================================================================
# ls, grep and tree doesn't have color enabled by default, so this aliases enables it.
if [[ "$(uname)" = "Darwin" ]]; then
    alias ls="ls -G"  # MacOS
else
    alias ls="ls --color=auto"  # GNU/Linux
fi
alias grep="grep --color=auto"
[[ -n "$commands[tree]" ]] && alias lt="tree -C"

# Useful aliases to list files.
alias la="ls -A"
alias ll="ls -l"
alias lla="ls -lA"

# Uses exa instead if installed and enabled.
if [[ "$DISABLE_EXA" != true && ( -n "$commands[eza]" || -n "$commands[exa]" ) ]]; then
    [[ -n "$commands[eza]" && -z "$commands[exa]" ]] && alias exa="eza"
      alias ls="exa --icons --group-directories-first"
      alias ls="exa --icons --group-directories-first"
      alias ll="exa --icons --group-directories-first --git -l"
      alias la="exa --icons --group-directories-first -a"
      alias lla="exa --icons --group-directories-first --git -la"
      alias lt="exa --icons -T"
fi

# If trash-cli is installed, this creates an alias to use it instead of rm.
# Using trash-cli is recommended since rm deletes files almost permanently.
[[ -n "$commands[trash]" ]] && alias rm="trash"

## OTHER ======================================================================
# Disables highlighting of pasted text.
zle_highlight+=(paste:none)

# If a command is issued that canâ€™t be executed as a normal command, and the
# command is the name of a directory, perform the cd command to that directory.
setopt autocd

# Sets window title. This is ignored in kitty because it has its way to do it.
if [[ $TERM != "xterm-kitty" ]]; then
  case "$TERM" in
    cygwin|xterm*|putty*|rxvt*|konsole*|ansi|mlterm*|alacritty|st*|foot*|contour*)
      function set_window_title() {
        print -Pn "\e]2;${USER}@${HOST}:${PWD/$HOME/~}\a"
      }
      autoload -Uz add-zsh-hook
      add-zsh-hook precmd set_window_title
      ;;
  esac
fi

# AFTER CONFIG ================================================================
[[ -f "$ZUNDER_ZSH_DIR/after.zsh" ]] && source "$ZUNDER_ZSH_DIR/after.zsh" || true
